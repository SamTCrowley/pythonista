from scene import *
from random import *

# class to define tile behavior
class Tile(Node):
	
	def __init__(self, x, y):
		# size of tile
		self.size = 50
		# list of neighboring tiles
		self.neighbors = []
		# state tells if the tile has been shown (1) or hidden (0) or flagged (2)
		self.state = 0
		# value is the number displayed on the tile, bombs are -1
		self.value = 0
		
		#self.create_image(x, y)
		self.position = (x, y)
	
	def create_image(self, x, y):
		# set up a rect to represent the tile
		rect_path = ui.Path.rect(0, 0, self.size, self.size)
		rect_path.line_width = 5
		# node to represent tile
		self.bg_node = ShapeNode(rect_path, 'gray', 'black')
		self.add_child(self.bg_node)
		
		self.text_node = LabelNode('', ('Helvetica', 28))
		self.bg_node.add_child(self.text_node)
		
	def point_inside(self, x, y):
		return self.bbox.contains_point((x, y))
		
	def add_neighbor(self, t):
		self.neighbors.append(t)
		
class Reset(Node):
	# this class represents a reset button
	# when clicked, it will begin a new game
	def __init__(self):
		rect_path = ui.Path.rect(0, 0, 100, 75)
		self.bg_node = ShapeNode(rect_path, 'white', 'black')
		self.text_node = LabelNode('RESET', ('Helvetica', 28))
		self.text_node.color = 'black'
		self.bg_node.add_child(self.text_node)
		self.add_child(self.bg_node)
	
	def point_inside(self, x, y):
		return self.bbox.contains_point((x, y))

class TestScene(Scene):
	def setup(self):
		# tile size is the width of each square tile
		self.tile_size = 28
		# width and height of tile gride
		self.tiles_wide = 25
		self.tiles_high = 25
		# set position of tile grid to center it on screen
		#self.tiles_pos_x = self.size.w / 2 - self.tiles_wide * self.tile_size / 2 + self.tile_size/2
		self.tiles_pos_x = self.tile_size / 2 + 10;
		self.tiles_pos_y = self.size.h / 2 - self.tiles_high * self.tile_size / 2 + self.tile_size / 2
		# number of bombs to place
		self.bomb_count = 100
		self.bomb_tiles = []
		self.num_flags = 0
		# length of long press
		self.long_press_time = 1
		self.touch_started_at = 0
		self.touch = False
		self.long_touch = False
		self.touch_pos = (0,0)
		self.touch_too_long = False
		# bools to keep track of game state
		# game_begin is set to true once the player taps the first tile
		# this will also trigger the bomb placement, so that the first tile is never a bomb
		self.game_begin = False;
		self.game_end = False;
		
		self.background_color = (.75, .75, .75)
		
		# create the tile grid as a 2D list of tiles
		self.tiles = []
		for i in range(self.tiles_wide):
			self.tiles.append([])
			for j in range(self.tiles_high):
				# calculate position of each tile
				t_x = self.tiles_pos_x + i * self.tile_size
				t_y = self.tiles_pos_y + j * self.tile_size
				# create the tile object at calculated position
				t = Tile(t_x, t_y)
				# set the size of the tile
				t.size = self.tile_size
				# draw the tile
				t.create_image(t_x, t_y)
				# add the tile to the list
				self.tiles[i].append(t)
				self.add_child(t)
				
		# set up the tiles neighbors
		# all 8 directions will be used for neighbors
		# inner tiles
		for i in range(1, self.tiles_wide - 1):
			for j in range(1, self.tiles_high - 1):
				t = self.tiles[i][j]
				t.add_neighbor(self.tiles[i - 1][j - 1])
				t.add_neighbor(self.tiles[i - 1][j + 0])
				t.add_neighbor(self.tiles[i - 1][j + 1])
				t.add_neighbor(self.tiles[i + 0][j - 1])
				t.add_neighbor(self.tiles[i + 0][j + 1])
				t.add_neighbor(self.tiles[i + 1][j - 1])
				t.add_neighbor(self.tiles[i + 1][j + 0])
				t.add_neighbor(self.tiles[i + 1][j + 1])
		
		# horizontal edge tiles
		for i in range(1, self.tiles_wide - 1):
			t = self.tiles[i][0]
			t.add_neighbor(self.tiles[i - 1][0])
			t.add_neighbor(self.tiles[i - 1][1])
			t.add_neighbor(self.tiles[i + 0][1])
			t.add_neighbor(self.tiles[i + 1][0])
			t.add_neighbor(self.tiles[i + 1][1])
			
			t = self.tiles[i][self.tiles_high - 1]
			t.add_neighbor(self.tiles[i - 1][self.tiles_high - 1])
			t.add_neighbor(self.tiles[i - 1][self.tiles_high - 2])
			t.add_neighbor(self.tiles[i + 0][self.tiles_high - 2])
			t.add_neighbor(self.tiles[i + 1][self.tiles_high - 1])
			t.add_neighbor(self.tiles[i + 1][self.tiles_high - 2])
		
		# horizontal edge tiles
		for j in range(1, self.tiles_high - 1):
			t = self.tiles[0][j]
			t.add_neighbor(self.tiles[0][j - 1])
			t.add_neighbor(self.tiles[0][j + 1])
			t.add_neighbor(self.tiles[1][j - 1])
			t.add_neighbor(self.tiles[1][j + 0])
			t.add_neighbor(self.tiles[1][j + 1])
			
			t = self.tiles[self.tiles_wide - 1][j]
			t.add_neighbor(self.tiles[self.tiles_wide - 1][j - 1])
			t.add_neighbor(self.tiles[self.tiles_wide - 1][j + 1])
			t.add_neighbor(self.tiles[self.tiles_wide - 2][j - 1])
			t.add_neighbor(self.tiles[self.tiles_wide - 2][j + 0])
			t.add_neighbor(self.tiles[self.tiles_wide - 2][j + 1])
		
		# corner tiles
		t = self.tiles[0][0]
		t.add_neighbor(self.tiles[0][1])
		t.add_neighbor(self.tiles[1][0])
		t.add_neighbor(self.tiles[1][1])
		
		t = self.tiles[0][self.tiles_high - 1]
		t.add_neighbor(self.tiles[0][self.tiles_high - 2])
		t.add_neighbor(self.tiles[1][self.tiles_high - 2])
		t.add_neighbor(self.tiles[1][self.tiles_high - 1])
		
		t = self.tiles[self.tiles_wide - 1][0]
		t.add_neighbor(self.tiles[self.tiles_wide - 1][1])
		t.add_neighbor(self.tiles[self.tiles_wide - 2][0])
		t.add_neighbor(self.tiles[self.tiles_wide - 2][1])
		
		t = self.tiles[self.tiles_wide - 1][self.tiles_high - 1]
		t.add_neighbor(self.tiles[self.tiles_wide - 1][self.tiles_high - 2])
		t.add_neighbor(self.tiles[self.tiles_wide - 2][self.tiles_high - 2])
		t.add_neighbor(self.tiles[self.tiles_wide - 2][self.tiles_high - 1])
		
		# create reset button
		self.reset = Reset()
		self.reset.position = (self.size.w - self.reset.bg_node.size.w, self.reset.bg_node.size.h)
		self.add_child(self.reset)
	
	# this function will start the game by creating and counting bombs		
	def start_game(self, ci, cj):
		# create bombs
		for b in range(self.bomb_count):
			# choose a random tile position
			i = randint(0, self.tiles_wide - 1)
			j = randint(0, self.tiles_high - 1)
			# if that position already has a bomb, choose again
			while(self.tiles[i][j].value == -1):
				i = randint(0, self.tiles_wide - 1)
				j = randint(0, self.tiles_high - 1)
			# if that position was the first clicked tile, chooose again
			while(i == ci and j == cj):
				i = randint(0, self.tiles_wide - 1)
				j = randint(0, self.tiles_high - 1)
			self.tiles[i][j].value = -1
			self.bomb_tiles.append(self.tiles[i][j])
			
		# count bombs in neighboring tiles
		# iterate through tiles
		for i in range(self.tiles_wide):
			for j in range(self.tiles_high):
				t = self.tiles[i][j]
				# if tile is not a bomb, begin counting
				if t.value != -1:
					bomb_sum = 0
					# iterate through the tile's neighbors
					for n in t.neighbors:
						# if the neighbor is a bomb, add it to the sum
						if n.value == -1:
							bomb_sum += 1
					# set the tile's value to the bomb sum
					t.value = bomb_sum
					
					
	def reveal_tile(self, t):
		# set the tile state to revealed (1)
		t.state = 1
		# the tile has no bombs
		if t.value != -1:
			t.bg_node.fill_color = (.25, .25, .25)
			# if the tile neighbors a bomb, display its value
			if t.value > 0:
				t.text_node.text = str(t.value)
		# if it is a bomb, set color to red and give it an X
		else:
			t.bg_node.fill_color = (0.1, 0.1, 0.1)
			t.text_node.text = 'ðŸ§¨'
		# if the value is 0, reveal neighbors
		if t.value == 0:
			for n in t.neighbors:
				# only reveal neighbor if not a bomb
				if n.value != -1:
					# only reveal hidden (0) tiles
					if n.state == 0:
						self.reveal_tile(n)
						
	def flag_tile(self, t):
		# set state of tile to flagged (2)
		t.state = 2
		t.bg_node.fill_color = 'blue'
		t.text_node.text = 'ðŸš©'
		self.num_flags += 1
		
	def unflag_tile(self, t):
		t.state = 0
		t.bg_node.fill_color = 'gray'
		t.text_node.text = ''
		self.num_flags =- 1
			
	def touch_began(self, touch):
		x, y = touch.location
		self.touch = True
		self.touch_started_at = self.t
		self.touch_pos = touch.location
		
		
		# start the game and create the bombs
		if self.game_begin == False:
			for i in range(self.tiles_wide):
				for j in range(self.tiles_high):
					t = self.tiles[i][j]
					if t.point_inside(x, y):
						self.start_game(i, j)
						break
			self.game_begin = True
		
	def check_win(self):
		win = True
		if self.num_flags == self.bomb_count:
			for t in self.bomb_tiles:
				if t.state != 2:
					win = False
			return win
		else:
			return False
	
	def check_loss(self):
		loss = False
		for t in self.bomb_tiles:
			if t.state == 1:
				loss = True
		return loss
	
	def win_game(self):
		for i in range(self.tiles_wide):
			for j in range(self.tiles_high):
				t = self.tiles[i][j]
				if t.state == 0:
					self.reveal_tile(t)
				if t.state == 2:
					t.bg_node.fill_color = 'green'
	
	def lose_game(self):
		for i in range(self.tiles_wide):
			for j in range(self.tiles_high):
				t = self.tiles[i][j]
				if t.state == 0:
					self.reveal_tile(t)
				if t.state == 2:
					if t not in self.bomb_tiles:
						t.bg_node.fill_color = 'red'
					else: t.bg_node.fill_color = 'green'
	
	def touch_ended(self, touch):
		x, y = touch.location
		self.touch = False
		if not self.touch_too_long:
			# check tiles
			for i in range(self.tiles_wide):
				for j in range(self.tiles_high):
					t = self.tiles[i][j]
					if t.point_inside(self.touch_pos[0], self.touch_pos[1]):
						if t.state == 0:
							self.reveal_tile(t)
		self.touch_too_long = False
						
		# check reset button
		if self.reset.point_inside(x, y):
			for i in self.children:
				i.remove_from_parent()
				del i
			self.setup()
			
		# check for win or loss
		if self.check_win():
			self.win_game()
		elif self.check_loss():
			self.lose_game()
	
	def update(self):
		# check for long touch
		if self.touch:
			if self.t - self.touch_started_at > self.long_press_time:
				self.long_touch = True
			else:
				self.long_touch = False
			
			if not self.touch_too_long:	
				if self.long_touch:
					# check tiles
					for i in range(self.tiles_wide):
						for j in range(self.tiles_high):
							t = self.tiles[i][j]
							if t.point_inside(self.touch_pos[0], self.touch_pos[1]):
								if t.state == 0:
									self.flag_tile(t)
								elif t.state == 2:
									self.unflag_tile(t)
					self.touch_too_long = True
					
								
			
		
		
run(TestScene())
